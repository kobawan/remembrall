type Material {
	id: ID!
	name: String!
	amount: Int!
	color: String
}

type Tool {
	id: ID!
	name: String!
	amount: Int!
	type: String
	size: String
}

type Category {
	id: ID!
	name: String!
}

type MaterialInProject {
	entry: Material
	amountUsed: Int!
}

type ToolInProject {
	entry: Tool
	amountUsed: Int!
}

type Project {
	id: ID!
	name: String!
	instructions: String
	notes: String
	categories: [Category]
	materials: [MaterialInProject]
	tools: [ToolInProject]
}

type User {
	id: ID!
	email: String!
	password: String!
	projects: [Project]
	categories: [Category]
	materials: [Material]
	tools: [Tool]
}

type Query {
	user: User!
	projects: [Project]
	categories: [Category]
	tools: [Tool]
	materials: [Material]
}

input ProjectFieldWithAmountUsedInput {
	id: ID!
	amountUsed: Int!
}

input ProjectInput {
	name: String!
	instructions: String
	notes: String
	categories: [ID]
	materials: [ProjectFieldWithAmountUsedInput]
	tools: [ProjectFieldWithAmountUsedInput]
}

input MaterialInput {
	name: String!
	amount: Int
	color: String
}

input CategoryInput {
	name: String!
}

input ToolInput {
	name: String!
	amount: Int
	type: String
	size: String
}

type Mutation {
	loginUser(email: String!, password: String!): User
	addUser(email: String!, password: String!): User!
	addProject(params: ProjectInput): Project!
	addCategory(params: CategoryInput): Category!
	addTool(params: ToolInput): Tool!
	addMaterial(params: MaterialInput): Material!
	deleteProject(id: ID!): Project
	deleteCategory(id: ID!): Category
	deleteTool(id: ID!): Tool
	deleteMaterial(id: ID!): Material
	updateProject(id: ID!, params: ProjectInput): Project!
	updateCategory(id: ID!, params: CategoryInput): Category!
	updateTool(id: ID!, params: ToolInput): Tool!
	updateMaterial(id: ID!, params: MaterialInput): Material!
}
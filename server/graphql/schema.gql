type Material {
	id: ID!
	name: String!
	amount: Int!
	color: String
}

type Tool {
	id: ID!
	name: String!
	amount: Int!
}

type Category {
	id: ID!
	name: String!
}

type Project {
	id: ID!
	name: String!
	instructions: String
	notes: String
	categories: [Category]
	materials: [Material]
	tools: [Tool]
}

type User {
	id: ID!
	projects: [Project]
	categories: [Category]
	materials: [Material]
	tools: [Tool]
}

type Query {
	user: User!
	projects: [Project]
	categories: [Category]
	tools: [Tool]
	materials: [Material]
}

input ProjectInput {
	name: String!
	instructions: String
	notes: String
	categories: [ID]
	materials: [ID]
	tools: [ID]
}

input MaterialInput {
	name: String!
	amount: Int
	color: String
}

input CategoryInput {
	name: String!
}

input ToolInput {
	name: String!
	amount: Int
}

input ToolToCategoryInput {
	category: ID!
	tool: ID!
}

type Mutation {
	addProject(params: ProjectInput): Project!
	addCategory(params: CategoryInput): Category!
	addTool(params: ToolInput): Tool!
	addMaterial(params: MaterialInput): Material!
	deleteProject(id: ID!): Project
	deleteCategory(id: ID!): Category
	deleteTool(id: ID!): Tool
	deleteMaterial(id: ID!): Material
	updateProject(id: ID!, params: ProjectInput): Project!
	updateCategory(id: ID!, params: CategoryInput): Category!
	updateTool(id: ID!, params: ToolInput): Tool!
	updateMaterial(id: ID!, params: MaterialInput): Material!
}